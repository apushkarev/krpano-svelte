<krpano
  ui_reaction_delay="0.075"
>

  <this />

  <!-- requires caller object -->
  <action name="get_this">
  
    copy(this, calc(_type + '[' + name + ']'));

  </action>

  <action name="array_push" type="javascript"><![CDATA[

    const [f, arrayName, arrayItemName] = args;

    krpano.set(`${arrayName}[${arrayItemName}].name`, arrayItemName);
    
  ]]></action>

  <action name="" type="javascript" autorun="preinit"><![CDATA[
  
    window.krpano = krpano;

    window._k = {

      a: () => krpano.actions,

      lgi: lName => krpano.layer.getItem(lName),
      lga: () => krpano.layer.getArray(),
      pgi: pName => krpano.plugin.getItem(pName),

      hgi: hName => krpano.hotspot.getItem(hName),
      hga: () => krpano.hotspot && krpano.hotspot.getArray(),

      sgi: sName => krpano.scene.getItem(sName),
      sga: () => krpano.scene && krpano.scene.getArray(),

      g: statement => krpano.get(statement),

      xs: () => krpano.xml.scene,

      sxs: () => krpano.scene.getItem(krpano.xml.scene),

      c: statement => krpano.call(statement),

      cwl: (lName, actions) => krpano.call(`callwith(layer[${lName}], ${actions})`),

      cwh: (hName, actions) => krpano.call(`callwith(hotspot[${lName}], ${action})`),

      i: () => krpano.inlinefunctions,

      s: () => krpano.settings,

      esi: () => krpano.embeddingsettings.initvars,
      esil: () => krpano.embeddingsettings.initvars._location,

      vh: () => parseFloat(krpano.view.hlookat),
      vv: () => parseFloat(krpano.view.vlookat),
      vf: () => parseFloat(krpano.view.fov),
      hfov: () => parseFloat(krpano.view.hfov),
      vfov: () => parseFloat(krpano.view.vfov),

      sl: () => krpano.actions.showlog(),

      isTrue: value => (typeof(value) == 'string' && value == 'true') || (typeof(value) == 'boolean' && value)
    }

  ]]></action>

  <action name="remove_array">

    if (%1,
      for(set(i, calc(%1.count - 1)), i GE 0, dec(i),
        %1.removearrayitem(get(i));
      );
    );
    
  </action>
  
  <style name="Invisible_Content"
    visible="false" alpha="0"

    show_before=""
    show_precall=""
    show_after=""
    show_fast_precall=""

    hide_precall=""
    hide_before=""
    hide_after=""
    hide_fast_precall=""

    tween_duration_show="0.25"
    tween_duration_hide="0.25"

    target_alpha="1"
    tween_type="default"

    allow_showing="true"
    allow_hiding="true"

    is_showing="false"
    is_hiding="false"

    show_delay="0"
    hide_delay="0"

    show_call=""
    hide_call=""

    onloaded.add_event="
      calc(show_call, name + '_show_call');
      calc(hide_call, name + '_hide_call');
    "

    show="
      show_precall();

      if (allow_showing,

        if (visible,

          if (is_hiding,
            stop_hiding();
            show_smooth_routine();
          );
        ,
          set(is_hiding, false);
          show_smooth_routine();          
        );
      );
    "

    show_smooth_routine="
      /* нужно заново рассчитывать название шоукола, потому что */
      /* событие onloaded может сработать позже, чем будет вызван метод show */
      delayedcall(calc(name + '_show_call'), get(show_delay),

        set(visible, true);

        show_before();

        set(is_showing, true);

        tween(alpha, get(target_alpha), get(tween_duration_show), get(tween_type),

          set(is_showing, false);
          show_after();
        );
      );
    "

    hide="
      hide_precall();

      if (allow_hiding,

        if (visible,
          set(is_showing, false);
          hide_smooth_routine();
        ,
          if (is_showing,
            stop_showing();
            hide_smooth_routine();   
          );          
        );
      );
    "

    hide_smooth_routine="

      delayedcall(calc(name + '_hide_call'), get(hide_delay),

        hide_before();

        set(is_hiding, true);

        tween(alpha, 0, get(tween_duration_hide), get(tween_type),

          set(visible, false);
          set(is_hiding, false);
          hide_after();
        );
      );  
    "

    stop_hiding="
      set(is_hiding, false);
      stopdelayedcall(calc(name + '_hide_call'));
      stoptween(alpha);
    "

    stop_showing="
      set(is_showing, false);
      stopdelayedcall(calc(name + '_show_call'));
      stoptween(alpha);
    "

    show_fast="

      show_fast_precall();

      if (allow_showing,

        stop_hiding();
        show_before();

        ifnot(visible,
        
          set(visible, true);
          copy(alpha, target_alpha);
          show_after();
        ,
          set(tween_in_progress, false);
        );
      );
    "
    hide_fast="

      hide_fast_precall();
      stop_showing();

      if (visible AND allow_hiding,

        hide_before();
        set(visible, false);
        set(alpha, 0);
        hide_after();
      ,
        set(tween_in_progress, false);
      );
    "
    update_alpha="
      if (visible AND alpha != target_alpha,
        tween(alpha, get(target_alpha), get(tween_duration), get(tween_type));
      );
    "
  />

  <style name="Visible"
    visible="true" alpha="1"
  />  

  <action name="new" type="javascript"><![CDATA[

    const [f, className, name, ...params] = args;

    const classArray = className.split('|');
    let constructorClass = '';

    for (let i = 0; i < classArray.length; i++) {
      if (classArray[i] != 'visible' && krpano.get(`style[${classArray[i]}].${classArray[i]}`)) {
        constructorClass = classArray[i];
      }
    }


    if (caller) {
      krpano.call(`
        copy(parent, ${caller._type}[${caller.name}]);
      `);
    }
    
    krpano.call(`style[${constructorClass}].${constructorClass}(${name}, ${className}, ${params.join(', ')});`);

  ]]></action>

  <action name="newhotspot">
  
    addhotspot(%1, this);
    this.loadstyle(%2);
    
  </action>

  <action name="newlayer">
  
    addlayer(%1, this);
    this.loadstyle(%2);
    
  </action>

  <console
    line_no="0"
    log="
      if (%1 OR %1 == 0 OR %1 == false,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  ', calc(%1)); 
      , %1 == NaN,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  %1 = NaN'); 
      , %1 == null,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  %1 = null'); 
      , %1 == '',
        trace(get(console.line_no), ' | name: ', get(name), ' ::  empty string'); 
      );

      inc(console.line_no);

      showlog();
    "
    divider="
      trace('----------------------------------------------------');
    "
    msg="
      trace(get(console.line_no), ' | name: ', get(name), ' ::  ', %1); 
      inc(console.line_no);
      showlog();
    "
    var_name=""
    var="
      set(var_name, %1);
      if ( %1 OR %1 == 0,
        trace(get(console.line_no), ' | name: ', get(name), ' :: ', var_name, ' = ', calc(%1)); 

      , %1 === null,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  ', var_name, ' = null'); 
        
      , %1 === NaN,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  ', var_name, ' = NaN'); 
      );
      inc(console.line_no);

      showlog();
    "
  />

  <action name="prompt" type="javascript"><![CDATA[

    var code = prompt(args[1], args[2]);

  ]]></action>

</krpano>
